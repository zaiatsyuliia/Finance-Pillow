// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(FPDbContext))]
    [Migration("20240516205016_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("ExpenseLimit")
                        .HasColumnType("integer");

                    b.Property<int>("IncomeLimit")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Data.Models.Budget", b =>
                {
                    b.Property<double?>("Budget1")
                        .HasColumnType("double precision")
                        .HasColumnName("budget");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("budget", (string)null);
                });

            modelBuilder.Entity("Data.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("expense_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExpenseId"));

                    b.Property<int?>("ExpenseCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("expense_category_id");

                    b.Property<double>("Sum")
                        .HasColumnType("double precision")
                        .HasColumnName("sum");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ExpenseId")
                        .HasName("expense_pkey");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("expense", (string)null);
                });

            modelBuilder.Entity("Data.Models.Expense6MonthsMonthly", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("Month")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("month");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("expense_6_months_monthly", (string)null);
                });

            modelBuilder.Entity("Data.Models.Expense6MonthsTotal", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("expense_6_months_total", (string)null);
                });

            modelBuilder.Entity("Data.Models.ExpenseCategory", b =>
                {
                    b.Property<int>("ExpenseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("expense_category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExpenseCategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("ExpenseCategoryId")
                        .HasName("expense_category_pkey");

                    b.ToTable("expense_category", (string)null);
                });

            modelBuilder.Entity("Data.Models.ExpenseMonthDaily", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("expense_month_daily", (string)null);
                });

            modelBuilder.Entity("Data.Models.ExpenseMonthTotal", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("expense_month_total", (string)null);
                });

            modelBuilder.Entity("Data.Models.ExpenseYearMonthly", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("Month")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("month");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("expense_year_monthly", (string)null);
                });

            modelBuilder.Entity("Data.Models.ExpenseYearTotal", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("expense_year_total", (string)null);
                });

            modelBuilder.Entity("Data.Models.History", b =>
                {
                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category");

                    b.Property<double?>("Sum")
                        .HasColumnType("double precision")
                        .HasColumnName("sum");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.Property<string>("TransactionType")
                        .HasColumnType("text")
                        .HasColumnName("transaction_type");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("history", (string)null);
                });

            modelBuilder.Entity("Data.Models.Income", b =>
                {
                    b.Property<int>("IncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("income_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IncomeId"));

                    b.Property<int?>("IncomeCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("income_category_id");

                    b.Property<double>("Sum")
                        .HasColumnType("double precision")
                        .HasColumnName("sum");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("IncomeId")
                        .HasName("income_pkey");

                    b.HasIndex("IncomeCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("income", (string)null);
                });

            modelBuilder.Entity("Data.Models.Income6MonthsMonthly", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("Month")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("month");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("income_6_months_monthly", (string)null);
                });

            modelBuilder.Entity("Data.Models.Income6MonthsTotal", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("income_6_months_total", (string)null);
                });

            modelBuilder.Entity("Data.Models.IncomeCategory", b =>
                {
                    b.Property<int>("IncomeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("income_category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IncomeCategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("IncomeCategoryId")
                        .HasName("income_category_pkey");

                    b.ToTable("income_category", (string)null);
                });

            modelBuilder.Entity("Data.Models.IncomeMonthDaily", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("income_month_daily", (string)null);
                });

            modelBuilder.Entity("Data.Models.IncomeMonthTotal", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("income_month_total", (string)null);
                });

            modelBuilder.Entity("Data.Models.IncomeYearMonthly", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("Month")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("month");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("income_year_monthly", (string)null);
                });

            modelBuilder.Entity("Data.Models.IncomeYearTotal", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("category_name");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("double precision")
                        .HasColumnName("total_sum");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("income_year_total", (string)null);
                });

            modelBuilder.Entity("Data.Models.Limit", b =>
                {
                    b.Property<int?>("ExpenseLimit")
                        .HasColumnType("integer")
                        .HasColumnName("expense_limit");

                    b.Property<bool?>("ExpenseLimitExceeded")
                        .HasColumnType("boolean")
                        .HasColumnName("expense_limit_exceeded");

                    b.Property<int?>("IncomeLimit")
                        .HasColumnType("integer")
                        .HasColumnName("income_limit");

                    b.Property<bool?>("IncomeLimitExceeded")
                        .HasColumnType("boolean")
                        .HasColumnName("income_limit_exceeded");

                    b.Property<double?>("TotalExpense")
                        .HasColumnType("double precision")
                        .HasColumnName("total_expense");

                    b.Property<double?>("TotalIncome")
                        .HasColumnType("double precision")
                        .HasColumnName("total_income");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.ToTable((string)null);

                    b.ToView("limits", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Models.Expense", b =>
                {
                    b.HasOne("Data.Models.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .HasConstraintName("expense_expense_category_id_fkey");

                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("expense_user_id_fkey");

                    b.Navigation("ExpenseCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.Income", b =>
                {
                    b.HasOne("Data.Models.IncomeCategory", "IncomeCategory")
                        .WithMany("Incomes")
                        .HasForeignKey("IncomeCategoryId")
                        .HasConstraintName("income_income_category_id_fkey");

                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("income_user_id_fkey");

                    b.Navigation("IncomeCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Data.Models.IncomeCategory", b =>
                {
                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
